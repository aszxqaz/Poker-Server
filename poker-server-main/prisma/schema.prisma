generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  username String @id @unique
  email    String @unique
  password String
  avatar   String @default("assets/avatars/avatar-male-1.svg")

  account Account?
  balance Balance?
  wallet  Wallet?

  observers Observer[]
  players   Player[]

  entries  TourneyEntry[]
  placings TourneyPlacing[]

  @@map("users")
}

model Account {
  username String @id @unique
  user     User   @relation(fields: [username], references: [username])

  blocked Boolean @default(false)

  @@map("accounts")
}

model Balance {
  username String @id @unique
  user     User   @relation(fields: [username], references: [username])

  usd Int @default(0)

  @@map("balances")
}

model Wallet {
  username String @id @unique
  user     User   @relation(fields: [username], references: [username])

  address String @unique
  encJson String

  @@map("wallets")
}

model IncomingTransaction {
  id String @id @default(uuid())

  timestamp DateTime @default(now())
  amount    Int
  ethId     String   @unique
  deposit   Deposit?

  @@map("incoming_transactions")
}

model Deposit {
  id String @id @default(uuid())

  timestamp DateTime @default(now())
  amount    Int

  incTrans   IncomingTransaction @relation(fields: [incTransId], references: [id])
  incTransId String              @unique

  @@map("deposits")
}

model Tourney {
  id Int @id @default(autoincrement())

  type      TourneyType
  bb        Int         @default(20)
  name      String
  buyin     Int
  tableSize Int
  prizes    Int[]

  speed       Speed
  chips       Int
  state       TourneyState @default(REGISTERING)
  tablesState TableState   @default(ACTIVE)

  startedAt DateTime?
  createdAt DateTime  @default(now())

  tables   Table[]
  entries  TourneyEntry[]
  placings TourneyPlacing[]

  @@map("tourneys")
}

model TourneyEntry {
  user     User   @relation(fields: [username], references: [username], onDelete: Cascade)
  username String

  tourney   Tourney @relation(fields: [tourneyId], references: [id], onDelete: Cascade)
  tourneyId Int

  @@id([username, tourneyId])
  @@map("tourneyEntries")
}

model TourneyPlacing {
  user     User   @relation(fields: [username], references: [username], onDelete: Cascade)
  username String

  tourney   Tourney @relation(fields: [tourneyId], references: [id], onDelete: Cascade)
  tourneyId Int

  place  Int
  amount Int?

  @@id([username, tourneyId])
  @@map("tourneyPlacings")
}

model CashTable {
  name String

  stack     Int
  bb        Int
  tableSize Int

  table   Table @relation(fields: [tableId], references: [id])
  tableId Int   @id @unique

  @@map("cashtables")
}

model Table {
  id Int @id @default(autoincrement())

  name String

  state     TableState @default(PENDING)
  tableSize Int
  type      TableType

  rounds  Json[]
  current Json?

  players   Player[]
  observers Observer[]

  tourney   Tourney? @relation(fields: [tourneyId], references: [id], onDelete: Cascade)
  tourneyId Int?

  cashTable CashTable?

  @@map("tables")
}

model Player {
  user     User   @relation(fields: [username], references: [username], onDelete: Cascade)
  username String

  table   Table @relation(fields: [tableId], references: [id], onDelete: Cascade)
  tableId Int

  chips Int

  @@id([username, tableId])
  @@map("players")
}

model Observer {
  user     User   @relation(fields: [username], references: [username], onDelete: Cascade)
  username String

  table   Table @relation(fields: [tableId], references: [id], onDelete: Cascade)
  tableId Int

  @@id([username, tableId])
  @@map("observers")
}

enum Speed {
  REGULAR
  TURBO
  HYPER
  ULTRA
}

enum TourneyType {
  MTT
  SNG
  SPIN
}

enum TableType {
  CASH
  TOURNEY
}

enum TourneyState {
  REGISTERING
  IN_PROGRESS
  FINISHED
}

enum TableState {
  ACTIVE
  PENDING
  PAUSED
}
